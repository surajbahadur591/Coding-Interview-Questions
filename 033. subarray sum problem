subarray sum problem

subarray are subset of array or contigous array 
they may be empty subset array;

find the subarray with the maximum sum
it may have -ve and +ve numbers

input : [-2, -3, -4, -1, -2, 1, 5,-1 ]
output : 7
if we have all +ve numbers then the whole array is maximum subset . ie we need -ve numbers 

function max_sum(a[]){
    max_sum_at_i = []; 
    max_sum_at_i = max(0, a[0]);
    for i 1 to a.length-1{
        max_sum_at_i[i] = max(max_sum_at_i[i-1], 0);
    }
    return max_sum_at_i;
}

find subarray that sums to X (13)
a=[2,1,4,5,3,5,1,2,4];
contains only +ve number
void findSub(int a[], x){
    start=0, end =0;
sum =0;
while (start <a.length){
    if sum<x {
        end++;
        if(end < a.length){
            sum += a[end];
        }
    }
    else if ( sum > x){
        start++;
        if(start < a.length){
            sum -= a[start];
        }
    }
    else return (start,end);

}
return (-1, -1);
}

find  contigous subarray that sums to 0, given +ve and -ve , return indices

a = [-1,-1,2,1,-4,2,3,-1,2]

map , sum = 0;
for i 0-> a.length-1
    sum =sum+a[i];
    if(sum == 0)
        return (0, i)
    else if map.contains(sum)
        return map.get(Sum)
    else map.put(sum,i)
    
    
